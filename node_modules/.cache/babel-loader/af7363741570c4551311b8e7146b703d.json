{"ast":null,"code":"import _regeneratorRuntime from \"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Token from '../abis/Token.json';\nimport EthSwap from '../abis/EthSwap.json';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, ethBalance, networkId, tokenData, abi, address, token, tokenBalance, ethSwapData, _abi, _address, ethSwap;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 7;\n                return web3.eth.getBalance(this.state.account);\n\n              case 7:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                });\n                _context2.next = 11;\n                return web3.eth.net.getId();\n\n              case 11:\n                networkId = _context2.sent;\n                tokenData = Token.networks[networkId];\n\n                if (!tokenData) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                abi = Token.abi;\n                address = tokenData.address;\n                token = new web3.eth.Contract(abi, address);\n                this.setState({\n                  token: token\n                });\n                _context2.next = 20;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 20:\n                tokenBalance = _context2.sent;\n                tokenBalance = tokenBalance.toString();\n                this.setState({\n                  tokenBalance: tokenBalance\n                });\n                _context2.next = 26;\n                break;\n\n              case 25:\n                window.alert('Token contract not deployed to detected network.');\n\n              case 26:\n                ethSwapData = EthSwap.networks[networkId];\n\n                if (ethSwapData) {\n                  _abi = EthSwap.abi;\n                  _address = ethSwapData.address;\n                  ethSwap = new web3.eth.Contract(_abi, _address);\n                  this.setState({\n                    ethSwap: ethSwap\n                  });\n                } else {\n                  window.alert('Token contract not deployed to detected network.');\n                }\n\n                this.setState({\n                  loading: false\n                });\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Non-Ethereum browser detected. You should consider trying Metamask!\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.buyTokens = function (etherAmount) {\n      _this.state.ethSwap.methods.buyTokens().send({});\n    };\n\n    _this.state = {\n      account: '',\n      token: {},\n      ethBalance: 0,\n      tokenBalance: 0,\n      ethSwap: {},\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        content = React.createElement(Main, {\n          ethBalance: this.state.ethBalance,\n          tokenBalance: this.state.tokenBalance,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '600px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/randallyeo/Desktop/Desktop Items/My Own Programming/Blockchain/eth_swap/src/components/App.js"],"names":["React","Component","Web3","Token","EthSwap","Navbar","Main","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","net","getId","networkId","tokenData","networks","abi","address","token","Contract","methods","balanceOf","call","tokenBalance","toString","alert","ethSwapData","ethSwap","loading","ethereum","enable","currentProvider","props","buyTokens","etherAmount","send","content","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3'\nimport Token from '../abis/Token.json'\nimport EthSwap from '../abis/EthSwap.json'\nimport './App.css';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\n\nclass App extends Component {\n  async componentWillMount(){\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData(){\n    const web3 = window.web3\n\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n    \n    const ethBalance = await web3.eth.getBalance(this.state.account)\n    \n    this.setState({ethBalance})\n\n    \n    const networkId = await web3.eth.net.getId()\n    const tokenData = Token.networks[networkId]\n    if (tokenData){\n      const abi = Token.abi\n      const address = tokenData.address\n      const token = new web3.eth.Contract(abi, address)\n      this.setState({ token })\n      let tokenBalance = await token.methods.balanceOf(this.state.account).call()\n      tokenBalance = tokenBalance.toString();\n      \n      this.setState({tokenBalance})\n    } else {\n      window.alert('Token contract not deployed to detected network.')\n    }\n\n    const ethSwapData = EthSwap.networks[networkId]\n    if (ethSwapData){\n      const abi = EthSwap.abi\n      const address = ethSwapData.address\n      const ethSwap = new web3.eth.Contract(abi, address)\n      this.setState({ ethSwap })\n      \n       \n    } else {\n      window.alert('Token contract not deployed to detected network.')\n    }\n    \n    this.setState({loading: false})\n  }\n\n  async loadWeb3(){\n    if (window.ethereum){\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable();\n\n    } else if (window.web3){\n      window.web3 = new Web3(window.web3.currentProvider)\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying Metamask!\")\n    }\n  }\n\n  buyTokens = (etherAmount)=>{\n    this.state.ethSwap.methods.buyTokens().send({})\n  }\n\n  constructor(props){\n    super(props);\n    this.state = {\n      account: '',\n      token :{},\n      ethBalance: 0,\n      tokenBalance: 0,\n      ethSwap: {},\n      loading: true\n    }\n  }\n\n  render() {\n    let content\n    \n    if (this.state.loading){\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n    } else {\n      content = <Main ethBalance={this.state.ethBalance} tokenBalance={this.state.tokenBalance} />\n    }\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                \n                {content}\n                \n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}